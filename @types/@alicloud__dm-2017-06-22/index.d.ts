/** 
 * Declaration file generated by dts-gen
 * Modified by Yunhao Cao @ interactiveplus.org
*/

declare module "@alicloud/dm-2017-06-22"{

    export = alicloud__dm_2017_06_22;

    class alicloud__dm_2017_06_22 {
        constructor(
            config : {
                endpoint: string;
                apiVersion?: string;
                accessKeyId: string;
                accessKeySecret: string;
                codes?: (string | number)[];
                opts?: object;
            }
        );

        addIpfilter(params : {IpAddress: string, ResourceOwnerId?: number, ResourceOwnerAccount?: string, OwnerId?: number, AccessKeyID?: string}, options : any): void;

        approveMailTemplate(...args: any[]): void;

        approveReplyMailAddress(...args: any[]): void;

        approveTemplate(...args: any[]): void;

        batchSendMail(...args: any[]): void;

        checkDomain(...args: any[]): void;

        checkReplyToMailAddress(...args: any[]): void;

        createDomain(...args: any[]): void;

        createMailAddress(...args: any[]): void;

        createReceiver(...args: any[]): void;

        createTag(...args: any[]): void;

        createTemplate(...args: any[]): void;

        deleteDomain(...args: any[]): void;

        deleteIpfilterByEdmId(...args: any[]): void;

        deleteMailAddress(...args: any[]): void;

        deleteReceiver(...args: any[]): void;

        deleteReceiverDetail(...args: any[]): void;

        deleteTag(...args: any[]): void;

        deleteTemplate(...args: any[]): void;

        descAccountSummary(...args: any[]): void;

        descDomain(...args: any[]): void;

        descTemplate(...args: any[]): void;

        enableAccount(...args: any[]): void;

        getAccountList(...args: any[]): void;

        getIpProtection(...args: any[]): void;

        getIpfilterList(...args: any[]): void;

        getRegionList(...args: any[]): void;

        getSenderAddressList(...args: any[]): void;

        getTrackList(...args: any[]): void;

        modifyAccountNotification(...args: any[]): void;

        modifyMailAddress(...args: any[]): void;

        modifySenderAddressNotification(...args: any[]): void;

        modifyTag(...args: any[]): void;

        modifyTemplate(...args: any[]): void;

        queryDomainByParam(...args: any[]): void;

        queryInvalidAddress(...args: any[]): void;

        queryMailAddressByParam(...args: any[]): void;

        queryReceiverByParam(...args: any[]): void;

        queryReceiverDetail(...args: any[]): void;

        querySmsStatistics(...args: any[]): void;

        queryTagByParam(...args: any[]): void;

        queryTaskByParam(...args: any[]): void;

        queryTemplateByParam(...args: any[]): void;

        saveReceiverDetail(...args: any[]): void;

        sendTestByTemplate(...args: any[]): void;

        senderStatisticsByTagNameAndBatchID(...args: any[]): void;

        senderStatisticsDetailByParam(...args: any[]): void;

        setMaxQuotaLevel(...args: any[]): void;

        singleSendMail(
            params: {
                AccountName: string,
                AddressType: number,
                TagName?: string,
                ReplyToAddress: boolean,
                ToAddress: string,
                Subject: string,
                HtmlBody?: string,
                TextBody?: string,
                FromAlias?: string,
                ReplyAddress?: string,
                ReplyAddressAlias?: string,
                ClickTrace?: string
            },
            options: any
        ): Promise<any>;

        updateDomainTrackName(...args: any[]): void;

        updateIpProtection(...args: any[]): void;

    }

    namespace alicloud__dm_2017_06_22 {
        class ROAClient {
            constructor(...args: any[]);

            buildAuthorization(...args: any[]): void;

            buildHeaders(...args: any[]): void;

            delete(...args: any[]): void;

            get(...args: any[]): void;

            post(...args: any[]): void;

            put(...args: any[]): void;

            request(...args: any[]): void;

            signature(...args: any[]): void;

        }

        class RPCClient {
            constructor(...args: any[]);

            request(...args: any[]): void;

            static RPCClient: any;

        }

        namespace RPCClient {
            class ROAClient {
                constructor(...args: any[]);

                buildAuthorization(...args: any[]): void;

                buildHeaders(...args: any[]): void;

                delete(...args: any[]): void;

                get(...args: any[]): void;

                post(...args: any[]): void;

                put(...args: any[]): void;

                request(...args: any[]): void;

                signature(...args: any[]): void;

            }

        }

    }


}